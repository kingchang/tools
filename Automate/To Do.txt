* If given a small content size, regardless of encoding, detect soft HTTP errors
  mainly for InterfaceLIFT (i.e. downloading an image giving HTML content type).
* Append "Error" to exception classes.
* Implement: $ automate.py task trailers /daily/ /weekly/
* Extract generic code to a separate library? PyPI? SO?
* Try? http://pypi.python.org/pypi/pip


Improve HD Trailers downloader:
* Skip same-numbered trailers/teasers/etc per movie.
* Ignore individual movies. Not that important with duplicate detection?
* History format draft:
{
    seen_videos: {
        "Transformers: Revenge of the Fallen (2009)": {
            "trailer": [1, 2],
            "teaser": [1],
        }
    }
}


Improve InterfaceLIFT downloader:
* Better dark detection? E.g.
  * Marked as bright? http://interfacelift.com/wallpaper/details/2866/
  * Marked as dark?
    * http://interfacelift.com/wallpaper/details/2866/
    * http://interfacelift.com/wallpaper/details/2886/
    * http://interfacelift.com/wallpaper/details/2890/
  * Also dark?
    * http://interfacelift.com/wallpaper/details/2857/
    * http://interfacelift.com/wallpaper/details/2856/
* Remove hard-coded link to InterfaceLift's JS script with the session code?
* Cache the session code based on cache-related HTTP headers?
* Analyze network performance?


* Improve configuration files:
  * Move default configuration to its own module?
  * How to dynamically change configuration values? E.g. logging level
  * Allow import's in configuration files.
* Whole project clean-up.
* Handle off-line network and sudden disconnects.
* Improve download manager URL history to decrease the log file size. Instead
  of logging each individual downloaded URL, save a history of hashes?
  Deal with concurrent access?
* Add support for more channels:
  * http://www.gametrailers.com/show/gametrailers-tv
  * http://www.gametrailers.com/retrospective/
  * http://www.gametrailers.com/game/gt-anthology/11170
  * http://www.gametrailers.com/game/level/14767
* Use a "plug-in" system for each source.
* Implement a GUI? System tray icon? Desktop gadget? System service? RSS feed?
  * http://www.riverbankcomputing.com/static/Docs/PyQt4/html/qml.html
  * http://www.riverbankcomputing.com/static/Docs/PyQt4/html/classes.html
  * http://zetcode.com/tutorials/pyqt4/
  * http://kivy.org/
* Notify tasks of shutdown?
* Use average estimates of new downloads/actions per unit of time, per
  task, in order to try and detect possible inactivity.
* Use command line options to execute download finished events.
* Create task for TV shows (backup, etc).
  * TV Rage API: http://services.tvrage.com/info.php?page=main
  * http://scenerules.irc.gs/t.html?id=2012_SDTVx264r.nfo
  * http://www.dailytvtorrents.org/rss/allshows?prefer=720&wait=3&minage=2
  Read browser cookies for automatic log-in?
  * https://metacpan.org/module/HTTP::Cookies::Opera
  * http://web.archive.org/web/20090208111457/http://www.opera.com/docs/fileformats/
  * http://ashula.info/opera/inis/cookies4dat
  * http://users.westelcom.com/jsegur/O4FE.HTM#cookies
* Settings backup with built-in support for MPC, Opera, StrokeIt, iTunes music
  list, etc. Use locks and/or transactions to avoid corrupt files.
* Clean up JavaScript package.
* Create UserJS to show content sensitive buttons on text selection:
  search, translate, IMDb movie link/ratings, unit conversions (ºF, ºC, €)
  * http://www.tgdaily.com/space-features/63469-new-found-exoplanet-is-evaporating-away
* Photo classification into date-named folders.
* Add documentation.
* Skip foreign GameTrailers videos like HD-Trailers (e.g. TGS Japanese).
* Allow black-listing of individual games/movies.
* Allow changing an URL's query parameter directly: url.query['name'] = value
* Test FDM detection on 32-bit Windows.
* Cache results of automate.util.io.Url.resolve()?
* Add a "cache = False" option to URL's?
* Skip YouTube captcha's?
  * http://www.slightlyshadyseo.com/index.php/exploring-and-breaking-the-google-captcha/
  * http://www.slightlyshadyseo.com/index.php/how-to-de-rotate-captcha-images/
  * http://www.slightlyshadyseo.com/index.php/xmcps-how-tobasic-captcha-cracking-techniques-part-1/
